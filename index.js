// Generated by CoffeeScript 1.6.3
(function() {
  var BLACK_HEIGHT_FRACTION, BLACK_WIDTH, KEY_X_OFFSETS, TRUE_WIDTH, WHITE_WIDTH,
    __hasProp = {}.hasOwnProperty;

  TRUE_WIDTH = 1003;

  WHITE_WIDTH = 94;

  BLACK_WIDTH = 63;

  BLACK_HEIGHT_FRACTION = 0.60;

  KEY_X_OFFSETS = {
    "c1": 4,
    "c#1": 73,
    "d1": 104,
    "d#1": 171,
    "e1": 204,
    "f1": 304,
    "f#1": 371,
    "g1": 404,
    "g#1": 471,
    "a1": 504,
    "a#1": 571,
    "b1": 604,
    "c2": 704,
    "c#2": 773,
    "d2": 804,
    "d#2": 871,
    "e2": 904
  };

  $.fn.textWidth = function() {
    var calculator, children, self, width;
    self = $(this);
    children = self.children();
    calculator = $("<span style=\"display: inline-block;\">");
    width = void 0;
    children.wrap(calculator);
    width = children.parent().width();
    children.unwrap();
    return width;
  };

  $(document).ready(function() {
    var $clickArea, $letter, $link, $links, chord, i, key, keyWidth, letter, link, linkHeight, linkTopOffset, reset, scale, size, _i, _j, _len, _len1, _ref;
    size = {
      width: $("#piano").width(),
      height: $("#piano").height()
    };
    scale = size.width / TRUE_WIDTH;
    WHITE_WIDTH *= scale;
    BLACK_WIDTH *= scale;
    for (key in KEY_X_OFFSETS) {
      if (!__hasProp.call(KEY_X_OFFSETS, key)) continue;
      KEY_X_OFFSETS[key] *= scale;
    }
    reset = function() {
      var newOffset;
      newOffset = {
        top: ($(window).height() - size.height) / 2,
        left: ($(window).width() - size.width) / 2
      };
      return $("#piano, #overlay, #links").offset(newOffset);
    };
    $(window).resize(reset);
    $links = $("#links").find(".chord-link");
    linkHeight = size.height * BLACK_HEIGHT_FRACTION / $links.length;
    linkTopOffset = 0;
    for (_i = 0, _len = $links.length; _i < _len; _i++) {
      link = $links[_i];
      $link = $(link);
      chord = $link.data("chord").split(",");
      $clickArea = $("<a></a>").css({
        position: "absolute",
        display: "block",
        "z-index": 2,
        width: size.width,
        height: linkHeight,
        top: linkTopOffset + "px",
        left: 0
      }).attr({
        href: $link.data("href")
      }).appendTo($("#links"));
      _ref = $link.html();
      for (i = _j = 0, _len1 = _ref.length; _j < _len1; i = ++_j) {
        letter = _ref[i];
        $letter = $("<div></div>").css({
          position: "absolute",
          display: "block"
        }).html(letter).addClass("chord-letter").appendTo($("#links"));
        keyWidth = chord[i].search('#') < 0 ? WHITE_WIDTH : BLACK_WIDTH;
        $letter.css({
          top: (linkTopOffset + (linkHeight - $letter.height()) - 5) + "px",
          left: (KEY_X_OFFSETS[chord[i]] + (keyWidth - $letter.width()) / 2) + "px",
          height: linkHeight,
          display: "none"
        });
      }
      linkTopOffset += linkHeight;
    }
    reset();
    return $("#piano").fadeIn("slow", function() {
      $("#overlay").show();
      return $(".chord-letter").fadeIn("slow");
    });
  });

}).call(this);
